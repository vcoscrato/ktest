% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kTest.R
\name{kGOFTest}
\alias{kGOFTest}
\title{kGOFTest}
\usage{
kGOFTest(data, rfunc, dfunc, perm = TRUE, B = 5000,
  bw = bw.nrd0(data[, 1]), npoints = 512, threads = detectCores() -
  1, param_names = NULL)
}
\arguments{
\item{data}{Either a list of numeric vectors, a numeric vector (with classes parameter defined), or a stacked data frame (first column with numeric values and second column with classes).}

\item{rfunc}{A function to generate data (see examples).}

\item{dfunc}{A function to evaluate real density values (see examples).}

\item{perm}{Boolean indicating weather to obtain the p-value trough the permutation test or just return return the common area between densities.}

\item{B}{Number of permutations.}

\item{bw}{The bandwidth used to estimate the kernel densities.}

\item{npoints}{The number of points used to estimate the kernel densities.}

\item{threads}{Number of cores to be used for parallel computing.}

\item{param_names}{A vector of variable names (as character). This parameter can be ignored when threads = 1. When using more then 1 threads, it is needed to export the global parameters name on the rfunc and dfunc functions (see examples).}

\item{classes}{Classes relative to data parameter, should be used only when data is a numeric vector.}
}
\value{
A list containing:

- commonArea: Common area between the kernel and the theoric density.

- p.value: The p-value generated by the permutation test (if perm = TRUE).
}
\description{
Performs a hypothesis test for goodness-of-fit based on the estimated kernel densities.
}
\examples{

#When using no extra parameters on rfunc and dfunc:

data = rnorm(100)

rfunc = function(n) {
  return(rnorm(n, 0, 1))
}

dfunc = function(x) {
  return(dnorm(x, 0, 1))
}

kGOFTest(data, rfunc, dfunc)

#When using parameters on rfunc and dfunc:

data = rnorm(100)

param1 = 0

param2 = 1

var_names = c(param1, param2)

rfunc = function(n) {
  return(rnorm(n, param1, param2))
}

dfunc = function(x) {
  return(dnorm(x, param1, param2))
}

kGOFTest(data, rfunc, dfunc, param_names = c('param1', 'param2'))
}
